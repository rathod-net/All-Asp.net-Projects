// <auto-generated />
using System;
using Data.DbContextEntity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.CuisineMaster", b =>
                {
                    b.Property<int>("CuisineMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CuisineMasterId"));

                    b.Property<string>("CuisineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CuisineMasterId");

                    b.ToTable("Cuisines");

                    b.HasData(
                        new
                        {
                            CuisineMasterId = 1,
                            CuisineName = "Indian",
                            IsActive = true
                        },
                        new
                        {
                            CuisineMasterId = 2,
                            CuisineName = "Chinese",
                            IsActive = true
                        },
                        new
                        {
                            CuisineMasterId = 3,
                            CuisineName = "Italian",
                            IsActive = true
                        },
                        new
                        {
                            CuisineMasterId = 4,
                            CuisineName = "Mexican",
                            IsActive = true
                        },
                        new
                        {
                            CuisineMasterId = 5,
                            CuisineName = "American",
                            IsActive = true
                        },
                        new
                        {
                            CuisineMasterId = 6,
                            CuisineName = "Thai",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Data.Entities.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"));

                    b.Property<int>("DeliveryPartnerProfileId")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryStatusMasterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PickupTime")
                        .HasColumnType("datetime2");

                    b.HasKey("DeliveryId");

                    b.HasIndex("DeliveryPartnerProfileId");

                    b.HasIndex("DeliveryStatusMasterId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Data.Entities.DeliveryPartnerProfile", b =>
                {
                    b.Property<int>("DeliveryPartnerProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryPartnerProfileId"));

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryPartnerProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DeliveryPartnerProfiles");
                });

            modelBuilder.Entity("Data.Entities.DeliveryStatusMaster", b =>
                {
                    b.Property<int>("DeliveryStatusMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryStatusMasterId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryStatusMasterId");

                    b.ToTable("DeliveryStatusMasters");

                    b.HasData(
                        new
                        {
                            DeliveryStatusMasterId = 1,
                            Description = "Delivery assigned to partner",
                            IsActive = true,
                            StatusName = "Assigned"
                        },
                        new
                        {
                            DeliveryStatusMasterId = 2,
                            Description = "Delivery partner has picked up the order",
                            IsActive = true,
                            StatusName = "PickedUp"
                        },
                        new
                        {
                            DeliveryStatusMasterId = 3,
                            Description = "Order is on the way",
                            IsActive = true,
                            StatusName = "EnRoute"
                        },
                        new
                        {
                            DeliveryStatusMasterId = 4,
                            Description = "Order delivered to the customer",
                            IsActive = true,
                            StatusName = "Delivered"
                        });
                });

            modelBuilder.Entity("Data.Entities.MenuCategory", b =>
                {
                    b.Property<int>("MenuCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("MenuCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuCategories");
                });

            modelBuilder.Entity("Data.Entities.MenuItem", b =>
                {
                    b.Property<int>("MenuItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuItemId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVeg")
                        .HasColumnType("bit");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("MenuItemId");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Data.Entities.Offer", b =>
                {
                    b.Property<int>("OfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(8,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<string>("OfferCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OfferId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusMasterId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("UserAddressId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("OrderStatusMasterId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Data.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Data.Entities.OrderOffer", b =>
                {
                    b.Property<int>("OrderOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderOfferId"));

                    b.Property<decimal>("DiscountApplied")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("OrderOfferId");

                    b.HasIndex("OfferId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderOffers");
                });

            modelBuilder.Entity("Data.Entities.OrderStatusMaster", b =>
                {
                    b.Property<int>("OrderStatusMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusMasterId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusMasterId");

                    b.ToTable("OrderStatusMasters");

                    b.HasData(
                        new
                        {
                            OrderStatusMasterId = 1,
                            Description = "Order received",
                            IsActive = true,
                            StatusName = "Placed"
                        },
                        new
                        {
                            OrderStatusMasterId = 2,
                            Description = "Restaurant confirmed the order",
                            IsActive = true,
                            StatusName = "Confirmed"
                        },
                        new
                        {
                            OrderStatusMasterId = 3,
                            Description = "Food is being prepared",
                            IsActive = true,
                            StatusName = "Preparing"
                        },
                        new
                        {
                            OrderStatusMasterId = 4,
                            Description = "Rider is out for delivery",
                            IsActive = true,
                            StatusName = "OutForDelivery"
                        },
                        new
                        {
                            OrderStatusMasterId = 5,
                            Description = "Order delivered",
                            IsActive = true,
                            StatusName = "Delivered"
                        },
                        new
                        {
                            OrderStatusMasterId = 6,
                            Description = "Order cancelled",
                            IsActive = true,
                            StatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("Data.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatusMasterId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeMasterId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PaymentStatusMasterId");

                    b.HasIndex("PaymentTypeMasterId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Data.Entities.PaymentStatusMaster", b =>
                {
                    b.Property<int>("PaymentStatusMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentStatusMasterId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentStatusMasterId");

                    b.ToTable("PaymentStatusMasters");

                    b.HasData(
                        new
                        {
                            PaymentStatusMasterId = 1,
                            Description = "Awaiting payment confirmation",
                            IsActive = true,
                            StatusName = "Pending"
                        },
                        new
                        {
                            PaymentStatusMasterId = 2,
                            Description = "Payment received",
                            IsActive = true,
                            StatusName = "Completed"
                        },
                        new
                        {
                            PaymentStatusMasterId = 3,
                            Description = "Payment failed",
                            IsActive = true,
                            StatusName = "Failed"
                        });
                });

            modelBuilder.Entity("Data.Entities.PaymentTypeMaster", b =>
                {
                    b.Property<int>("PaymentTypeMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentTypeMasterId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentTypeMasterId");

                    b.ToTable("PaymentTypeMasters");

                    b.HasData(
                        new
                        {
                            PaymentTypeMasterId = 1,
                            Description = "Pay using credit card",
                            IsActive = true,
                            TypeName = "CreditCard"
                        },
                        new
                        {
                            PaymentTypeMasterId = 2,
                            Description = "Unified Payments Interface",
                            IsActive = true,
                            TypeName = "UPI"
                        },
                        new
                        {
                            PaymentTypeMasterId = 3,
                            Description = "Pay with cash upon delivery",
                            IsActive = true,
                            TypeName = "CashOnDelivery"
                        });
                });

            modelBuilder.Entity("Data.Entities.Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Data.Entities.RestaurantAddress", b =>
                {
                    b.Property<int>("RestaurantAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantAddressId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Landmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantAddressId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantAddresses");
                });

            modelBuilder.Entity("Data.Entities.RestaurantClosure", b =>
                {
                    b.Property<int>("RestaurantClosureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantClosureId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RestaurantClosureId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantClosures");
                });

            modelBuilder.Entity("Data.Entities.RestaurantCuisine", b =>
                {
                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("CuisineMasterId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantCuisineId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantId", "CuisineMasterId");

                    b.HasIndex("CuisineMasterId");

                    b.ToTable("RestaurantCuisines");
                });

            modelBuilder.Entity("Data.Entities.RestaurantOwnerProfile", b =>
                {
                    b.Property<int>("RestaurantOwnerProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantOwnerProfileId"));

                    b.Property<string>("AdminRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessLicenseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GSTIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantOwnerProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RestaurantOwnerProfiles");
                });

            modelBuilder.Entity("Data.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeliveryPartnerProfileId")
                        .HasColumnType("int");

                    b.Property<int?>("MenuItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("DeliveryPartnerProfileId");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Data.Entities.RoleMaster", b =>
                {
                    b.Property<int>("RoleMasterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleMasterId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleMasterId");

                    b.HasIndex(new[] { "RoleName" }, "IX_RoleName_Unique")
                        .IsUnique();

                    b.ToTable("RoleMasters");

                    b.HasData(
                        new
                        {
                            RoleMasterId = 1,
                            Description = "Super Admin",
                            IsActive = true,
                            RoleName = "SuperAdmin"
                        },
                        new
                        {
                            RoleMasterId = 2,
                            Description = "System administrator",
                            IsActive = true,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleMasterId = 3,
                            Description = "Regular user placing orders",
                            IsActive = true,
                            RoleName = "Customer"
                        },
                        new
                        {
                            RoleMasterId = 4,
                            Description = "Delivery personnel",
                            IsActive = true,
                            RoleName = "DeliveryPartner"
                        },
                        new
                        {
                            RoleMasterId = 5,
                            Description = "Restaurant owner",
                            IsActive = true,
                            RoleName = "RestaurantOwner"
                        });
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RoleMasterId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("RoleMasterId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Data.Entities.UserAddress", b =>
                {
                    b.Property<int>("UserAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAddressId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Landmark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Data.Entities.Delivery", b =>
                {
                    b.HasOne("Data.Entities.DeliveryPartnerProfile", "DeliveryPartnerProfile")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryPartnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.DeliveryStatusMaster", "DeliveryStatusMaster")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryStatusMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithOne("Delivery")
                        .HasForeignKey("Data.Entities.Delivery", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeliveryPartnerProfile");

                    b.Navigation("DeliveryStatusMaster");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.DeliveryPartnerProfile", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("DeliveryPartnerProfile")
                        .HasForeignKey("Data.Entities.DeliveryPartnerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.MenuCategory", b =>
                {
                    b.HasOne("Data.Entities.Restaurant", "Restaurant")
                        .WithMany("MenuCategories")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Data.Entities.MenuItem", b =>
                {
                    b.HasOne("Data.Entities.MenuCategory", "MenuCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("Data.Entities.Offer", b =>
                {
                    b.HasOne("Data.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.HasOne("Data.Entities.OrderStatusMaster", "OrderStatusMaster")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.UserAddress", "UserAddress")
                        .WithMany()
                        .HasForeignKey("UserAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderStatusMaster");

                    b.Navigation("Restaurant");

                    b.Navigation("User");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("Data.Entities.OrderItem", b =>
                {
                    b.HasOne("Data.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.OrderOffer", b =>
                {
                    b.HasOne("Data.Entities.Offer", "Offer")
                        .WithMany("OrderOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Order", "Order")
                        .WithMany("OrderOffers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Data.Entities.Payment", b =>
                {
                    b.HasOne("Data.Entities.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("Data.Entities.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Entities.PaymentStatusMaster", "PaymentStatusMaster")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentStatusMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.PaymentTypeMaster", "PaymentTypeMaster")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentTypeMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentStatusMaster");

                    b.Navigation("PaymentTypeMaster");
                });

            modelBuilder.Entity("Data.Entities.Restaurant", b =>
                {
                    b.HasOne("Data.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Data.Entities.RestaurantAddress", b =>
                {
                    b.HasOne("Data.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Data.Entities.RestaurantClosure", b =>
                {
                    b.HasOne("Data.Entities.Restaurant", "Restaurant")
                        .WithMany("Closures")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Data.Entities.RestaurantCuisine", b =>
                {
                    b.HasOne("Data.Entities.CuisineMaster", "CuisineMaster")
                        .WithMany("RestaurantCuisines")
                        .HasForeignKey("CuisineMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Restaurant", "Restaurant")
                        .WithMany("RestaurantCuisines")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CuisineMaster");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Data.Entities.RestaurantOwnerProfile", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithOne("RestaurantOwnerProfile")
                        .HasForeignKey("Data.Entities.RestaurantOwnerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.Review", b =>
                {
                    b.HasOne("Data.Entities.DeliveryPartnerProfile", "DeliveryPartnerProfile")
                        .WithMany("Reviews")
                        .HasForeignKey("DeliveryPartnerProfileId");

                    b.HasOne("Data.Entities.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId");

                    b.HasOne("Data.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryPartnerProfile");

                    b.Navigation("MenuItem");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.HasOne("Data.Entities.RoleMaster", "RoleMaster")
                        .WithMany()
                        .HasForeignKey("RoleMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleMaster");
                });

            modelBuilder.Entity("Data.Entities.UserAddress", b =>
                {
                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.CuisineMaster", b =>
                {
                    b.Navigation("RestaurantCuisines");
                });

            modelBuilder.Entity("Data.Entities.DeliveryPartnerProfile", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Data.Entities.DeliveryStatusMaster", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Data.Entities.MenuCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Data.Entities.Offer", b =>
                {
                    b.Navigation("OrderOffers");
                });

            modelBuilder.Entity("Data.Entities.Order", b =>
                {
                    b.Navigation("Delivery")
                        .IsRequired();

                    b.Navigation("OrderItems");

                    b.Navigation("OrderOffers");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.OrderStatusMaster", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Data.Entities.PaymentStatusMaster", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Data.Entities.PaymentTypeMaster", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Data.Entities.Restaurant", b =>
                {
                    b.Navigation("Closures");

                    b.Navigation("MenuCategories");

                    b.Navigation("Orders");

                    b.Navigation("RestaurantCuisines");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("DeliveryPartnerProfile");

                    b.Navigation("Orders");

                    b.Navigation("RestaurantOwnerProfile");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
